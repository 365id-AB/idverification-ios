#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef IDVERIFICATION365ID_SWIFT_H
#define IDVERIFICATION365ID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IdVerification365id",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Status of the transaction
typedef SWIFT_ENUM(NSInteger, AssessmentType, open) {
/// “Yellow” result where the document is identified but where we can’t say yay nor nay
  AssessmentTypeInconclusive = 0,
/// “Green” result where the document is verified to be valid
  AssessmentTypeValid = 1,
/// “Yellow” result where the document could not be identified
  AssessmentTypeUnidentified = 2,
/// “Red” result where the document is invalid
  AssessmentTypeRejected = 3,
};


@class WhiteLabeling;
@class NSString;
@class TransactionResult;
@class IdVerificationTheme;
@protocol IdVerificationEventDelegate;
@class UIViewController;

/// This is the class used when you need to access the SDK from Objective-C or you need to wrap the sdk in order to
/// include it in a multi platform solution like Xamarin
SWIFT_CLASS("_TtC19IdVerification365id14IdVerification")
@interface IdVerification : NSObject
/// Set custom theme to the SDK
/// \param whiteLabeling Custom WhiteLabeling of the SDK
///
+ (void)addCustomTheme:(WhiteLabeling * _Nonnull)whiteLabeling SWIFT_DEPRECATED_MSG("Use setCustomTheme instead");
/// This is the SDK main entry point
/// Note: This is called when you are about to start the identification session.
/// \param deviceInfo Device information used to identify and conect to the 365id cloud
///
/// \param callBack callBack used to receive the transaction result
///
///
/// returns:
///
/// Returns true if the devcie information is set properly and it received the session token from the cloud
+ (BOOL)startWithDeviceInfo:(NSDictionary<NSString *, NSString *> * _Nonnull)deviceInfo callBack:(void (^ _Nonnull)(TransactionResult * _Nonnull))callBack SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use IdVerification.start(token:locationId:delegate:) instead");
/// This is a simplified SDK entry point
/// Note: This is called when you are about to start the identification session.
/// \param token The token used for the SDK authentication
///
/// \param callBack callBack used to receive the transaction result
///
///
/// returns:
///
/// Returns true if the token is proper and the sdk received the session token from the cloud
+ (BOOL)startWithToken:(NSString * _Nonnull)token callBack:(void (^ _Nonnull)(TransactionResult * _Nonnull))callBack SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use IdVerification.start(token:locationId:delegate:) instead");
/// Set custom theme to the SDK
/// \param whiteLabeling Custom IdVerificationTheme of the SDK
///
+ (void)setCustomTheme:(IdVerificationTheme * _Nonnull)idVerificationTheme;
/// This is the SDK main entry point
/// Note: This is called when you are about to start the identification session.
/// \param token Device information used to identify and conect to the 365id cloud
///
/// \param locationId Unused parameter, must be set to 0.
///
/// \param delegate To register callbacks from IdVerification SDK that is informing about various events
///
///
/// returns:
///
/// Returns true if the sdk is able to start properly
+ (BOOL)startWithToken:(NSString * _Nonnull)token locationId:(NSInteger)locationId delegate:(id <IdVerificationEventDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Cleanup SDK
/// Note: This is called when the sdk is done and you are done using it.
+ (void)stop;
/// Creates the UIViewController for the SDK that you need to show to the user in order for the SDK to be able
/// to perform the verification process
/// \param showAppBar Boolean value deciding if the SDK should show the integrated AppBar (shown at the top of the
/// view). The AppBar contains a close button the user can use to abort the verification process.
///
///
/// returns:
///
/// Returns a UIHostingController containing the sdk verification views.
+ (UIViewController * _Nonnull)createMainViewWithShowAppBar:(BOOL)showAppBar SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use IdVerification.createMainView() instead");
/// Creates the UIViewController for the SDK that you need to show to the user in order for the SDK to be able
/// to perform the verification process
///
/// returns:
///
/// Returns a UIHostingController containing the sdk verification views.
+ (UIViewController * _Nonnull)createMainView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Id Verification Errors used in the <code>onError(error:)</code> method in the <code>IdVerificationEventDelegate</code>
typedef SWIFT_ENUM(NSInteger, IdVerificationError, open) {
/// Happens when the provided token is invalid
  IdVerificationErrorInvalidTokenError = 0,
/// Happens when there is an error caused by something on the device itself
  IdVerificationErrorClientError = 1,
/// Happens when there is an error thrown by the 365id server
  IdVerificationErrorServerError = 2,
/// Happens when the SDK version used are, not supported by 365id any longer
  IdVerificationErrorUnsupportedSdkVersionError = 3,
/// Happens when there are no remainig transactions on the current license,
/// please contact your 365id salesrepresentative
  IdVerificationErrorNoActivePackageError = 4,
/// Happens when the session token timed out
  IdVerificationErrorSessionTimeout = 5,
};


/// This is a error bundle used to present errors generated from the IdVerification SDK
SWIFT_CLASS("_TtC19IdVerification365id25IdVerificationErrorBundle")
@interface IdVerificationErrorBundle : NSObject
/// The specific error that occured
@property (nonatomic, readonly) enum IdVerificationError error;
/// A message giving a more descriptive information. Not suitable for end user presentation.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class IdVerificationResult;

/// IdVerification SDK event Delegate
SWIFT_PROTOCOL("_TtP19IdVerification365id27IdVerificationEventDelegate_")
@protocol IdVerificationEventDelegate
/// Called when SDK has finished initializing and is ready to be displayed on the device.
- (void)onStarted;
/// Called when the user exits the SDK using the back button.
- (void)onUserDismissed;
/// Called when all remaining resources tied to the SDK instance has been cleaned up.
- (void)onClosed;
/// Called when there is an error with the sdk. A verification transaction can not be recovered after this call is
/// recieved.
- (void)onError:(IdVerificationErrorBundle * _Nonnull)error;
/// Called when the id verification process has completed
- (void)onCompleted:(IdVerificationResult * _Nonnull)result;
@end


/// This class represents the result returned by 365id after a completed verification transaction.
SWIFT_CLASS("_TtC19IdVerification365id20IdVerificationResult")
@interface IdVerificationResult : NSObject
/// The id used to identify the verification transaction.
/// @Note: This is the id you provide to your server side implementation to be able to look up the result of the
/// transaction
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class UIImage;
enum PoweredByLogo : NSInteger;

/// Used to define theming that can be applied to the 365id IdVerification SDK
SWIFT_CLASS("_TtC19IdVerification365id19IdVerificationTheme")
@interface IdVerificationTheme : NSObject
/// Creates a instance for IdVerificationTheme the SDK
/// \param surface App bar background color
///
/// \param onSurface Animations and icons
///
/// \param background Body
///
/// \param primary The scan button
///
/// \param onPrimary The scan button text
///
/// \param secondary Infobox outer position
///
/// \param secondaryContainer Infobox inner position
///
/// \param onSecondary Infobox text
///
/// \param onSecondaryContainer Infobox sub text
///
/// \param appBarLogo Header icon
///
/// \param poweredByLogo Types of “powered by Logo” to be shown at the bottom of the screen.
///
/// \param showAppBar Boolean value deciding if the SDK should show the integrated AppBar
///
- (nonnull instancetype)initWithSurface:(UIColor * _Nullable)surface onSurface:(UIColor * _Nullable)onSurface background:(UIColor * _Nullable)background primary:(UIColor * _Nullable)primary onPrimary:(UIColor * _Nullable)onPrimary secondary:(UIColor * _Nullable)secondary secondaryContainer:(UIColor * _Nullable)secondaryContainer onSecondary:(UIColor * _Nullable)onSecondary onSecondaryContainer:(UIColor * _Nullable)onSecondaryContainer appBarLogo:(UIImage * _Nullable)appBarLogo poweredByLogo:(enum PoweredByLogo)poweredByLogo showAppBar:(BOOL)showAppBar OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PoweredByLogo, open) {
/// The standard logo with the purple colors.
  PoweredByLogoSTANDARD = 0,
/// Logo with white color.
  PoweredByLogoWHITE = 1,
/// Logo with black color.
  PoweredByLogoBLACK = 2,
/// No logo to be shown.
  PoweredByLogoNONE = 3,
};

typedef SWIFT_ENUM(NSInteger, StatusType, open) {
/// Returned when the verification process has completed successfully. Does NOT imply
/// anything regarding the validity or authenticity of the document iself.
  StatusTypeOK = 0,
/// Returned if the User dismisses the SDK prematurely, e.g. by pressing the back button or
/// performing a “back” gesture
  StatusTypeDismissed = 1,
/// Returned if an exception was encountered in the verification process, on the client side.
  StatusTypeClientException = 2,
/// Returned if an exception was encountered in the verification process, on the server side.
  StatusTypeServerException = 3,
/// Returned if the session token timed out
  StatusTypeSessionTimeout = 4,
};


/// This struct represents the result that will always be returned by the 365iD SDK for iOS.
SWIFT_CLASS("_TtC19IdVerification365id17TransactionResult") SWIFT_DEPRECATED
@interface TransactionResult : NSObject
/// Send the status of the SDK to flutter app
@property (nonatomic, readonly) enum StatusType Status;
@property (nonatomic, readonly) enum AssessmentType Assessment;
@property (nonatomic, readonly, copy) NSString * _Nonnull TransactionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull UserMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Custom WhiteLabeling of the SDK
SWIFT_CLASS("_TtC19IdVerification365id13WhiteLabeling") SWIFT_DEPRECATED_MSG("Use IdVerificationTheme instead")
@interface WhiteLabeling : NSObject
/// Creates a instance for WhiteLabeling the SDK
/// \param headerColor Header bar
///
/// \param backgroundColor Body
///
/// \param iconColor Animations and icons
///
/// \param appBarLogo Header icon
///
/// \param scanButtonColor The scan button
///
/// \param scanButtonTextColor The scan button text
///
/// \param containerBoxOuterColor Infobox outer position
///
/// \param containerBoxInnerColor Infobox inner position
///
/// \param containerBoxTextColor Infobox text
///
/// \param containerBoxSubTextColor Infobox sub text
///
- (nonnull instancetype)initWithHeaderColor:(UIColor * _Nullable)headerColor backgroundColor:(UIColor * _Nullable)backgroundColor iconColor:(UIColor * _Nullable)iconColor appBarLogo:(UIImage * _Nullable)appBarLogo scanButtonColor:(UIColor * _Nullable)scanButtonColor scanButtonTextColor:(UIColor * _Nullable)scanButtonTextColor containerBoxOuterColor:(UIColor * _Nullable)containerBoxOuterColor containerBoxInnerColor:(UIColor * _Nullable)containerBoxInnerColor containerBoxTextColor:(UIColor * _Nullable)containerBoxTextColor containerBoxSubTextColor:(UIColor * _Nullable)containerBoxSubTextColor poweredByLogo:(enum PoweredByLogo)poweredByLogo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
