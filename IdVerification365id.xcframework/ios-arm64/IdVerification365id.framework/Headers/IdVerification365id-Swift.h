#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef IDVERIFICATION365ID_SWIFT_H
#define IDVERIFICATION365ID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IdVerification365id",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Enumeration of different types of document size.
typedef SWIFT_ENUM(NSInteger, DocumentSizeType, open) {
/// The shape of the document is id1 (credit card size) .
  DocumentSizeTypeId1 = 0,
/// The shape of the document is id3 (passport size).
  DocumentSizeTypeId3 = 1,
/// The default to use when any physical document is assumed to be scanned
  DocumentSizeTypeDocument = 2,
/// This is used to only capture an image of the document, no verification will be performed
  DocumentSizeTypeOdd = 3,
};

/// Enumeration of different types of document.
typedef SWIFT_ENUM(NSInteger, DocumentType, open) {
  DocumentTypePassport = 0,
  DocumentTypeDiplomaticPassport = 1,
  DocumentTypeEmergencyPassport = 2,
  DocumentTypeServicePassport = 3,
  DocumentTypeDrivingLicense = 4,
  DocumentTypeAssociatedDrivingLicense = 5,
  DocumentTypeProvisionalDrivingLicense = 6,
  DocumentTypeTravelDocument = 7,
  DocumentTypeTemporaryTravelDocument = 8,
  DocumentTypeNationalId = 9,
  DocumentTypePersonalId = 10,
  DocumentTypeDiplomaticId = 11,
  DocumentTypeMilitaryId = 12,
  DocumentTypeOfficialId = 13,
  DocumentTypeAssociatedId = 14,
  DocumentTypeResidencePermit = 15,
  DocumentTypeTemporaryResidencePermit = 16,
  DocumentTypeAuthorisationDocument = 17,
  DocumentTypeDigitalId = 18,
  DocumentTypeUnknown = 19,
};


/// Enumeration of face match feedback.
typedef SWIFT_ENUM(NSInteger, FaceMatchFeedback, open) {
/// Facematch completed and the face matched.
  FaceMatchFeedbackMatched = 0,
/// Facematch complete, but the face did NOT match.
  FaceMatchFeedbackNoMatch = 1,
/// User aborted the face match.
  FaceMatchFeedbackAborted = 2,
};

@class IdVerificationTheme;
@class NSString;
@class IdVerificationSkipModules;
@protocol IdVerificationEventDelegate;
@class UIViewController;

/// This is the class used when you need to access the SDK from Objective-C or you need to wrap the sdk in order to
/// include it in a multi platform solution like Xamarin
SWIFT_CLASS("_TtC19IdVerification365id14IdVerification")
@interface IdVerification : NSObject
/// Set custom theme to the SDK
/// \param idVerificationTheme Custom IdVerificationTheme of the SDK
///
+ (void)setCustomTheme:(IdVerificationTheme * _Nonnull)idVerificationTheme;
/// This is the SDK main entry point
/// note:
/// This is called when you are about to start the identification session.
/// \param token Access token used to identify and connect to the 365id cloud
///
/// \param locationId Unused parameter, must be set to 0.
///
/// \param skipModules Modules that can be skipped during the identification process.
///
/// \param documentSizeType The type of document the user is encouraged to scan, use <code>.document</code> if it is not needed.
///
/// \param delegate To register callbacks from IdVerification SDK that is informing about various events
///
///
/// returns:
///
/// Returns true if the sdk is able to start properly
+ (BOOL)startWithToken:(NSString * _Nonnull)token locationId:(NSInteger)locationId skipModules:(IdVerificationSkipModules * _Nonnull)skipModules documentSizeType:(enum DocumentSizeType)documentSizeType delegate:(id <IdVerificationEventDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Cleanup SDK
/// note:
/// This is called when the sdk is done and you are done using it.
+ (void)stop;
/// Creates the UIViewController for the SDK that you need to show to the user in order for the SDK to be able
/// to perform the verification process
///
/// returns:
///
/// Returns a UIHostingController containing the sdk verification views.
+ (UIViewController * _Nonnull)createMainView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Used to customize all the animations in the Idverification SDK
/// \param prepareId3 Shown when preparing to take photo of ID3-shaped documents
///
/// \param prepareId1Frontside Shown when preparing to take photo of frontside of ID1-shaped document
///
/// \param prepareId1Backside Shown when preparing to take photo of backside of ID1-shaped document
///
/// \param prepareDocument Shown when preparing to take photo without specifying the document shape
///
/// \param prepareOddSizedDocument Shown when preparing to take photo of odd sized document
///
/// \param prepareNfc Shown when preparing for the NFC step
///
/// \param prepareId1Nfc Shown when preparing for the NFC step of ID1-shaped document
///
/// \param prepareId3Nfc Shown when preparing for the NFC step of ID3-shaped document
///
/// \param prepareDocumentNfc Shown when preparing for the NFC step without specifying the document shape
///
/// \param prepareFaceMatch Shwon when prparing for the face matching step
///
/// \param instructionId3 Shown during the ‘take photo of ID3-shaped document’ step
///
/// \param instructionId1Frontside Shown during the ‘take photo of frontside of ID1-shaped document’ step
///
/// \param instructionId1Backside Shown during the ‘take photo of backside of ID1-shaped document’ step
///
/// \param instructionOddSizedDocument For the future use.
///
/// \param instructionDocument Shown during the ‘take photo of generic document’ step
///
/// \param instructionNfc Shown during the ‘NFC’ step
///
/// \param instructionId1Nfc Shown during the ‘NFC’ step of ID1-shaped document
///
/// \param instructionId3Nfc Shown during the ‘NFC’ step of ID3-shaped document
///
/// \param instructionDocumentNfc Shown during the ‘NFC’ step without specifying the document shape
///
/// \param loadingImageCapture Shown after taking photo of a document
///
/// \param loadingNfc Shown after completing the NFC step
///
/// \param loadingFaceMatch Shown after completing the face matching step
///
/// \param loadingGeneric Generic loading animation shown when 365id backend is busy processing a request
///
/// \param Note 
/// <ul>
///   <li>
///     <em>prepareNfc</em> and <em>instructionNfc</em> are deprecated.
///   </li>
///   <li>
///     <em>prepareNfc</em> animation will override <em>prepareId1Nfc</em>, <em>prepareId3Nfc</em> and <em>prepareDocumentNfc</em>
///   </li>
///   <li>
///     <em>instructionNfc</em> animation will override <em>instructionId1Nfc</em>, <em>instructionId3Nfc</em> and <em>instructionDocumentNfc</em>
///   </li>
///   <li>
///     <em>instructionOddSizedDocument</em> is reserved it for future purpose.
///   </li>
/// </ul>
///
SWIFT_CLASS("_TtCC19IdVerification365id14IdVerification10Animations")
@interface Animations : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Id Verification Errors used in the <code>onError(error:)</code> method in the <code>IdVerificationEventDelegate</code>
typedef SWIFT_ENUM(NSInteger, IdVerificationError, open) {
/// Happens when the provided token is invalid
  IdVerificationErrorInvalidTokenError = 0,
/// Happens when there is an error caused by something on the device itself
  IdVerificationErrorClientError = 1,
/// Happens when there is an error thrown by the 365id server
  IdVerificationErrorServerError = 2,
/// Happens when the SDK version used are, not supported by 365id any longer
  IdVerificationErrorUnsupportedSdkVersionError = 3,
/// Happens when there are no remainig transactions on the current license,
/// please contact your 365id salesrepresentative
  IdVerificationErrorNoActivePackageError = 4,
/// Happens when the session token timed out
  IdVerificationErrorSessionTimeout = 5,
};


/// This is a error bundle used to present errors generated from the IdVerification SDK
SWIFT_CLASS("_TtC19IdVerification365id25IdVerificationErrorBundle")
@interface IdVerificationErrorBundle : NSObject
/// The specific error that occured
@property (nonatomic, readonly) enum IdVerificationError error;
/// A message giving a more descriptive information. Not suitable for end user presentation.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NfcFeedback : NSInteger;
@class IdVerificationResult;

/// IdVerification SDK event Delegate that is informing about various events
SWIFT_PROTOCOL("_TtP19IdVerification365id27IdVerificationEventDelegate_")
@protocol IdVerificationEventDelegate
/// Called when SDK has finished initializing and is ready to be displayed on the device.
- (void)onStarted;
/// Called when the transaction is created.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     transactionId: Transaction id.
///   </li>
/// </ul>
- (void)onTransactionCreated:(NSString * _Nonnull)transactionId;
/// Called when the user exits the SDK using the back button.
- (void)onUserDismissed;
/// Called when the document is identified or unidentified.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     documentType: Type of the document.
///   </li>
///   <li>
///     countryCode: Identification code for an issuing countries. Format is ISO 3166-1 alpha-3
///     The country code for generic passport is “365”.
///   </li>
/// </ul>
- (void)onDocumentFeedback:(enum DocumentType)documentType countryCode:(NSString * _Nonnull)countryCode;
/// Called when the nfc process has completed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     nfcFeedback: The idverification nfc process feedback.
///   </li>
///   <li>
///     expiryDate: The expiry date of the document (YYYYMMDD).
///   </li>
/// </ul>
- (void)onNfcFeedback:(enum NfcFeedback)nfcFeedback expiryDate:(NSString * _Nonnull)expiryDate;
/// Called when the face match process has completed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     facematchFeedback: The idverification face match process feedback.
///   </li>
/// </ul>
- (void)onFaceMatchFeedback:(enum FaceMatchFeedback)facematchFeedback;
/// Called when all remaining resources tied to the SDK instance has been cleaned up.
- (void)onClosed;
/// Called when there is an error with the sdk. A verification transaction can not be recovered after this call is
/// recieved.
- (void)onError:(IdVerificationErrorBundle * _Nonnull)error;
/// Called when the id verification process has completed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     result: The idverification result from the completed verification transaction.
///   </li>
/// </ul>
- (void)onCompleted:(IdVerificationResult * _Nonnull)result;
@end


/// This class represents the result returned by 365id after a completed verification transaction.
SWIFT_CLASS("_TtC19IdVerification365id20IdVerificationResult")
@interface IdVerificationResult : NSObject
/// The id used to identify the verification transaction.
/// note:
/// This is the id you provide to your server side implementation to be able to look up the result of the
/// transaction
/// note:
/// When a result is delivered the transactionId shall always contain a string representation of the
/// transaction id, i.e. It shall never be an empty string.
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Modules that can be skipped during the identification process.
typedef SWIFT_ENUM(NSInteger, IdVerificationSkipModule, open) {
/// The NFC identification process.
  IdVerificationSkipModuleNfc = 0,
/// The face match identification process.
  IdVerificationSkipModuleFaceMatch = 1,
};


/// Class that contains a list of modules that can be skipped during the identification process.
SWIFT_CLASS("_TtC19IdVerification365id25IdVerificationSkipModules")
@interface IdVerificationSkipModules : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithObjCModules:(NSArray<NSNumber *> * _Nonnull)objCModules OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
enum PoweredByLogo : NSInteger;

/// Used to define theming that can be applied to the 365id IdVerification SDK
SWIFT_CLASS("_TtC19IdVerification365id19IdVerificationTheme")
@interface IdVerificationTheme : NSObject
/// Creates a instance for IdVerificationTheme the SDK
/// \param primary Used on the Scan button and the progress bat in the nfc view
///
/// \param onPrimary The contrasting text color on the scan button
///
/// \param primaryContainer Used in the background of the nfc progressbar
///
/// \param secondary Used on the future progress indicators
///
/// \param onSecondary The contrasting text on the future progress indicators
///
/// \param secondaryContainer Used on the cancel button
///
/// \param onSecondaryContainer The contrasting text on the cancel button
///
/// \param tertiary Used on the current progress indicators
///
/// \param onTertiary The contrasting text on the current progress indicators
///
/// \param tertiaryContainer Used on the completed progress indicators
///
/// \param onTertiaryContainer The contrasting text on the completed progress indicators
///
/// \param surface The background used in the app
///
/// \param onSurface Color of primary text on the surface
///
/// \param onSurfaceVariant Color of non primary text on the surface
///
/// \param inverseSurface The overlay used in the camera views
///
/// \param inverseOnSurface Used for the frames in the camera views.
///
/// \param poweredByLogo Types of “powered by Logo” to be shown at the bottom of the screen.
///
/// \param animations A Class containing swiftUI animation views that can be replaced in the SDK.
///
- (nonnull instancetype)initWithPrimary:(UIColor * _Nullable)primary onPrimary:(UIColor * _Nullable)onPrimary primaryContainer:(UIColor * _Nullable)primaryContainer secondary:(UIColor * _Nullable)secondary onSecondary:(UIColor * _Nullable)onSecondary secondaryContainer:(UIColor * _Nullable)secondaryContainer onSecondaryContainer:(UIColor * _Nullable)onSecondaryContainer tertiary:(UIColor * _Nullable)tertiary onTertiary:(UIColor * _Nullable)onTertiary tertiaryContainer:(UIColor * _Nullable)tertiaryContainer onTertiaryContainer:(UIColor * _Nullable)onTertiaryContainer surface:(UIColor * _Nullable)surface onSurface:(UIColor * _Nullable)onSurface onSurfaceVariant:(UIColor * _Nullable)onSurfaceVariant inverseSurface:(UIColor * _Nullable)inverseSurface inverseOnSurface:(UIColor * _Nullable)inverseOnSurface poweredByLogo:(enum PoweredByLogo)poweredByLogo animations:(Animations * _Nonnull)animations OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Enumeration of nfc feedback.
typedef SWIFT_ENUM(NSInteger, NfcFeedback, open) {
/// User skipped while reading the nfc chip.
  NfcFeedbackAborted = 0,
/// Reading the nfc chip was completed.
  NfcFeedbackCompleted = 1,
/// Reading the nfc chip failed.
  NfcFeedbackFailed = 2,
};

/// Types of “powered by logo” to be shown at the bottom of the screen.
typedef SWIFT_ENUM(NSInteger, PoweredByLogo, open) {
/// The standard logo with the purple colors.
  PoweredByLogoSTANDARD = 0,
/// Logo with white color.
  PoweredByLogoWHITE = 1,
/// Logo with black color.
  PoweredByLogoBLACK = 2,
/// No logo to be shown.
  PoweredByLogoNONE = 3,
};






#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
