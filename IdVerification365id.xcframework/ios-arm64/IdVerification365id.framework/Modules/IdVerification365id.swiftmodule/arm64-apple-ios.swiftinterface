// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IdVerification365id
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Combine
import CoreNFC
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum NfcFeedback : Swift.Int {
  case aborted = 0
  case completed = 1
  case failed = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}






@objc public class IdVerificationTheme : ObjectiveC.NSObject {
  @objc public init(primary: UIKit.UIColor? = nil, onPrimary: UIKit.UIColor? = nil, primaryContainer: UIKit.UIColor? = nil, secondary: UIKit.UIColor? = nil, onSecondary: UIKit.UIColor? = nil, secondaryContainer: UIKit.UIColor? = nil, onSecondaryContainer: UIKit.UIColor? = nil, tertiary: UIKit.UIColor? = nil, onTertiary: UIKit.UIColor? = nil, tertiaryContainer: UIKit.UIColor? = nil, onTertiaryContainer: UIKit.UIColor? = nil, surface: UIKit.UIColor? = nil, onSurface: UIKit.UIColor? = nil, onSurfaceVariant: UIKit.UIColor? = nil, inverseSurface: UIKit.UIColor? = nil, inverseOnSurface: UIKit.UIColor? = nil, poweredByLogo: IdVerification365id.PoweredByLogo = .STANDARD, animations: IdVerification365id.IdVerification.Animations = IdVerification.Animations())
  public func copyWith(primary: UIKit.UIColor? = nil, onPrimary: UIKit.UIColor? = nil, primaryContainer: UIKit.UIColor? = nil, secondary: UIKit.UIColor? = nil, onSecondary: UIKit.UIColor? = nil, secondaryContainer: UIKit.UIColor? = nil, onSecondaryContainer: UIKit.UIColor? = nil, tertiary: UIKit.UIColor? = nil, onTertiary: UIKit.UIColor? = nil, tertiaryContainer: UIKit.UIColor? = nil, onTertiaryContainer: UIKit.UIColor? = nil, surface: UIKit.UIColor? = nil, onSurface: UIKit.UIColor? = nil, onSurfaceVariant: UIKit.UIColor? = nil, inverseSurface: UIKit.UIColor? = nil, inverseOnSurface: UIKit.UIColor? = nil, poweredByLogo: IdVerification365id.PoweredByLogo? = nil, animations: IdVerification365id.IdVerification.Animations? = nil) -> IdVerification365id.IdVerificationTheme
  @objc deinit
}

@objc public enum DocumentSizeType : Swift.Int {
  case id1 = 0
  case id3 = 1
  case document = 2
  case odd = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class IdVerification : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc public class Animations : ObjectiveC.NSObject {
    public var prepareId3: any SwiftUICore.View
    public var prepareId1Frontside: any SwiftUICore.View
    public var prepareId1Backside: any SwiftUICore.View
    public var prepareDocument: any SwiftUICore.View
    public var prepareOddSizedDocument: any SwiftUICore.View
    @available(*, deprecated)
    public var prepareNfc: any SwiftUICore.View
    public var prepareId1Nfc: any SwiftUICore.View
    public var prepareId3Nfc: any SwiftUICore.View
    public var prepareDocumentNfc: any SwiftUICore.View
    public var prepareFaceMatch: any SwiftUICore.View
    public var instructionId3: any SwiftUICore.View
    public var instructionId1Frontside: any SwiftUICore.View
    public var instructionId1Backside: any SwiftUICore.View
    public var instructionOddSizedDocument: any SwiftUICore.View
    public var instructionDocument: any SwiftUICore.View
    @available(*, deprecated)
    public var instructionNfc: any SwiftUICore.View
    public var instructionId1Nfc: any SwiftUICore.View
    public var instructionId3Nfc: any SwiftUICore.View
    public var instructionDocumentNfc: any SwiftUICore.View
    public var loadingImageCapture: any SwiftUICore.View
    public var loadingNfc: any SwiftUICore.View
    public var loadingFaceMatch: any SwiftUICore.View
    public var loadingGeneric: any SwiftUICore.View
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public static func setCustomTheme(_ idVerificationTheme: IdVerification365id.IdVerificationTheme)
  @objc public static func start(token: Swift.String, locationId: Swift.Int = 0, skipModules: IdVerification365id.IdVerificationSkipModules = IdVerificationSkipModules([]), documentSizeType: IdVerification365id.DocumentSizeType = .document, delegate: any IdVerification365id.IdVerificationEventDelegate) -> Swift.Bool
  @objc public static func stop()
  @objc public static func createMainView() -> UIKit.UIViewController
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol IdVerificationEventDelegate {
  @objc func onStarted()
  @objc func onTransactionCreated(_ transactionId: Swift.String)
  @objc func onUserDismissed()
  @objc func onDocumentFeedback(_ documentType: IdVerification365id.DocumentType, countryCode: Swift.String)
  @objc func onNfcFeedback(_ nfcFeedback: IdVerification365id.NfcFeedback, expiryDate: Swift.String)
  @objc func onFaceMatchFeedback(_ facematchFeedback: IdVerification365id.FaceMatchFeedback)
  @objc func onClosed()
  @objc func onError(_ error: IdVerification365id.IdVerificationErrorBundle)
  @objc func onCompleted(_ result: IdVerification365id.IdVerificationResult)
}




@_Concurrency.MainActor @preconcurrency public struct IdVerificationView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s19IdVerification365id0A16VerificationViewV4bodyQrvp", 0) __
}
@objc public enum DocumentType : Swift.Int {
  case passport = 0
  case diplomaticPassport = 1
  case emergencyPassport = 2
  case servicePassport = 3
  case drivingLicense = 4
  case associatedDrivingLicense = 5
  case provisionalDrivingLicense = 6
  case travelDocument = 7
  case temporaryTravelDocument = 8
  case nationalId = 9
  case personalId = 10
  case diplomaticId = 11
  case militaryId = 12
  case officialId = 13
  case associatedId = 14
  case residencePermit = 15
  case temporaryResidencePermit = 16
  case authorisationDocument = 17
  case digitalId = 18
  case unknown = 19
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FaceMatchFeedback : Swift.Int {
  case matched = 0
  case noMatch = 1
  case aborted = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}





extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func asUIImage() -> UIKit.UIImage
}

@objc public enum IdVerificationError : Swift.Int {
  case invalidTokenError = 0
  case clientError = 1
  case serverError = 2
  case unsupportedSdkVersionError = 3
  case noActivePackageError = 4
  case sessionTimeout = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}

@_hasMissingDesignatedInitializers @objc public class IdVerificationResult : ObjectiveC.NSObject {
  @objc final public let transactionId: Swift.String
  @objc deinit
}


@_hasMissingDesignatedInitializers @objc public class IdVerificationErrorBundle : ObjectiveC.NSObject {
  @objc final public let error: IdVerification365id.IdVerificationError
  @objc final public let message: Swift.String
  @objc deinit
}


@objc public enum IdVerificationSkipModule : Swift.Int {
  case nfc = 0
  case faceMatch = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class IdVerificationSkipModules : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(objCModules: [Swift.Int])
  public init(_ modules: [IdVerification365id.IdVerificationSkipModule])
  @objc deinit
}
@objc public enum PoweredByLogo : Swift.Int {
  case STANDARD
  case WHITE
  case BLACK
  case NONE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func reverseMask<Mask>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder _ mask: () -> Mask) -> some SwiftUICore.View where Mask : SwiftUICore.View {
    self.mask {
      Rectangle()
        .overlay(alignment: alignment) {
          mask()
            .blendMode(.destinationOut)
        }
    }
  }
  
}

extension IdVerification365id.NfcFeedback : Swift.Equatable {}
extension IdVerification365id.NfcFeedback : Swift.Hashable {}
extension IdVerification365id.NfcFeedback : Swift.RawRepresentable {}
extension IdVerification365id.DocumentSizeType : Swift.Equatable {}
extension IdVerification365id.DocumentSizeType : Swift.Hashable {}
extension IdVerification365id.DocumentSizeType : Swift.RawRepresentable {}
extension IdVerification365id.IdVerificationView : Swift.Sendable {}
extension IdVerification365id.DocumentType : Swift.Equatable {}
extension IdVerification365id.DocumentType : Swift.Hashable {}
extension IdVerification365id.DocumentType : Swift.RawRepresentable {}
extension IdVerification365id.FaceMatchFeedback : Swift.Equatable {}
extension IdVerification365id.FaceMatchFeedback : Swift.Hashable {}
extension IdVerification365id.FaceMatchFeedback : Swift.RawRepresentable {}
extension IdVerification365id.IdVerificationError : Swift.Equatable {}
extension IdVerification365id.IdVerificationError : Swift.Hashable {}
extension IdVerification365id.IdVerificationError : Swift.RawRepresentable {}
extension IdVerification365id.IdVerificationSkipModule : Swift.Equatable {}
extension IdVerification365id.IdVerificationSkipModule : Swift.Hashable {}
extension IdVerification365id.IdVerificationSkipModule : Swift.RawRepresentable {}
extension IdVerification365id.PoweredByLogo : Swift.Equatable {}
extension IdVerification365id.PoweredByLogo : Swift.Hashable {}
extension IdVerification365id.PoweredByLogo : Swift.RawRepresentable {}
